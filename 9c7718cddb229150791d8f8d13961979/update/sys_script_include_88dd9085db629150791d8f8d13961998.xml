<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_pointsthing.PointsThing</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>PointsThing</name>
        <script><![CDATA[var PointsThing = Class.create();
PointsThing.prototype = {
	initialize: function() {
		this.token = gs.getProperty("pointsthing.token");
	},

	establish_user: function(payload_user, increment_point, set_points) {
		var userSysID = '';
		var user = new GlideRecord('x_snc_pointsthing_user');
		if (user.get('user_id', payload_user)) {
			userSysID = user.getUniqueValue();
		} else {
			user.newRecord();
			user.setValue('user_id', payload_user);
			userSysID = user.insert();
		}
		if (increment_point){
			var score = parseInt(user.getValue('points'));
			score++;
			user.setValue('points', score);
			user.update();
		} else if (set_points){
			if (user.getValue('points') != set_points) user.setValue('points', set_points);
			user.update();
		}
		if (!user.getValue('user_name')){
			this.get_user_info(payload_user, userSysID);
		}
		return userSysID;
	},

	send_chat: function(chat_gr, message, force_thread) {
		var rm = new sn_ws.RESTMessageV2();
		rm.setHttpMethod('POST');
		rm.setEndpoint('https://slack.com/api/chat.postMessage');
		rm.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
		rm.setRequestHeader("Authorization", "Bearer " + this.token);
		//rm.setLogLevel('all');

		var bodyString = '';
		bodyString += '&channel=' + gs.urlEncode(chat_gr.channel);
		if (chat_gr.thread_ts) {
			bodyString += '&thread_ts=' + gs.urlEncode(chat_gr.thread_ts);
		} else if (force_thread) {
			bodyString += '&thread_ts=' + gs.urlEncode(chat_gr.ts);
		}
		if (typeof message == 'object' && message.blocks) {
			bodyString += '&text=' + gs.urlEncode(message.text);
			bodyString += '&blocks=' + gs.urlEncode(message.blocks);
		} else {
			bodyString += '&text=' + gs.urlEncode(message);
		}
		rm.setRequestBody(bodyString);
		return rm.execute();
	},

	get_user_info: function(slack_id, record_id) {
		var rm = new sn_ws.RESTMessageV2();
		rm.setHttpMethod('POST');
		rm.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
		rm.setRequestHeader("Authorization", "Bearer " + gs.getProperty("pointsthing.token"));
		//rm.setLogLevel('all');

		var bodyString = '';
		bodyString += 'user=' + gs.urlEncode(slack_id);
		rm.setEndpoint('https://slack.com/api/users.info' + '?' + bodyString);
		var response = rm.execute();
		var response_body = JSON.parse(response.getBody());

		if (response_body.user.name) {
			var grupdate = new GlideRecord('x_snc_pointsthing_user');
			grupdate.get(record_id);
			grupdate.setValue('user_name', response_body.user.real_name);
			grupdate.update();
			return true;
		} else {
			return false;
		}
	},

	broadcast_points: function(matches, current){
		var messages = [];
		var users_completed = [];
		for (var i in matches){

			if (users_completed.indexOf(matches[i]) > -1) continue;
			else users_completed.push(matches[i]);

			if (current.user == matches[i]) {
				messages.push('No self points!');
				continue;
			} else {
				var pointsTotal = new GlideRecord("x_snc_pointsthing_user");
				pointsTotal.get('user_id', matches[i]);
				var total = pointsTotal.getValue('points');

				var gaPoints = new GlideAggregate('x_snc_pointsthing_point');
				gaPoints.addQuery('target', pointsTotal.getUniqueValue()); 
				gaPoints.addAggregate('COUNT');
				gaPoints.query();
				if (gaPoints.next()) {
					var points = gaPoints.getAggregate('COUNT');
				}

				var user = '<@' + matches[i] + '>';
				messages.push([
					new GlideScopedEvaluator().evaluateScript(this.milestone_check(total), 'message', {'user': user, 'total': total, 'points': points}),
					'(' + total + ' total)'
				].join(' '));
			}
		}
		this.send_chat(current, messages.join('\n'), false);
	},

	milestone_check: function(total){
		var milestone = new GlideRecord('x_snc_pointsthing_message');
		milestone.addQuery('point', total.toString());
		milestone.query();
		if (milestone.hasNext()){
			var random_milestone = Math.floor(Math.random() * milestone.getRowCount())+1;
			for (var i = 0; i < random_milestone; i++){
				milestone.next();
			}
			return milestone;
		} else {
			var default_message = new GlideRecord('x_snc_pointsthing_message');
			default_message.addEncodedQuery('point=0^ORpoint=NULL');
			default_message.query();
			var random_default = Math.floor(Math.random() * default_message.getRowCount())+1;
			for (var j = 0; j < random_default; j++){
				default_message.next();
			}
			return default_message;
		}
	},

	leaderboard: function(chat_gr, send){
		var items = [];
		try {
			items.push('Points leaderboard (top 5% of users in past 90 days):');
			var count = new GlideAggregate('x_snc_pointsthing_point');
			count.addEncodedQuery('sys_created_onONLast 90 days@javascript:gs.beginningOfLast90Days()@javascript:gs.endOfLast90Days()^targetISNOTEMPTY');
			count.addAggregate('COUNT(DISTINCT', 'target');
			count.setGroup(false);
			count.query();
			count.next();
			var total_users = parseInt(count.getAggregate('COUNT(DISTINCT', 'target'));
			var top_10_percent = Math.ceil(total_users * .05);
			//items.push('total users: ' + total_users + '. top_10_percent: ' + top_10_percent);
			
			count.orderByAggregate('COUNT', 'target');
			count.addAggregate('COUNT', 'target');
			count.setGroup(true);
			count.query();
			var rank = 1;
			while (count.next()){
				var item = '';
				var user_name = count.target.user_name.toString();
				
				if (rank == 1) item = ':first_place_medal: ' + user_name + ' - ' + count.getAggregate('COUNT', 'target') + ' points';
				else if (rank == 2) item = ':second_place_medal: ' + user_name + ' - ' + count.getAggregate('COUNT', 'target') + ' points';
				else if (rank == 3) item = ':third_place_medal: ' + user_name + ' - ' + count.getAggregate('COUNT', 'target') + ' points';
				else if (rank > 3 && rank < top_10_percent) item = user_name + ' (' + count.getAggregate('COUNT', 'target') + ')';
				else if (chat_gr && chat_gr.user && count.target.user_id.includes(chat_gr.user.user_id)) item = '...' + user_name + ' (' + count.getAggregate('COUNT', 'target') + ' points, ~' + (Math.round(rank / 10) * 10) + ' percentile rounded to the nearest 10)';
				else {
					rank++;
					continue;
				}
				rank++;	
					
				items.push(item);
			}
		} catch (em){
			/*items.push('```Error:');
			for (var i in em){
				items.push(i + ': ' + em[i]);
			}
			items.push('```');*/
		}

		//items.push('');
		//items.push('https://devprogramresources.service-now.com/sndevs?id=points_leaderboard');
		
		if (send) this.send_chat(chat_gr, items.join('\n'), true);
		else return items;
	},

	type: 'PointsThing'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>earl.duque</sys_created_by>
        <sys_created_on>2022-10-13 03:22:36</sys_created_on>
        <sys_id>88dd9085db629150791d8f8d13961998</sys_id>
        <sys_mod_count>59</sys_mod_count>
        <sys_name>PointsThing</sys_name>
        <sys_package display_value="Points Thing" source="x_snc_pointsthing">9c7718cddb229150791d8f8d13961979</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Points Thing">9c7718cddb229150791d8f8d13961979</sys_scope>
        <sys_update_name>sys_script_include_88dd9085db629150791d8f8d13961998</sys_update_name>
        <sys_updated_by>earl.duque</sys_updated_by>
        <sys_updated_on>2022-10-18 06:29:46</sys_updated_on>
    </sys_script_include>
</record_update>
